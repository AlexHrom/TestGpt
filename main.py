import aiohttp
import openai
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import json
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
import io
from aiogram.types import InputFile
import asyncio
import time

file = open('config.json', 'r')
config = json.load(file)

openai.api_key = config['openai']
bot = Bot(config['token'])
dp = Dispatcher(bot)

chat_storage = {}
timestamps = {}

messages = [
    {"role": "system", "content": "You are AI-powered assistant in Telegram connected via Bot API, your creator is @AleksFolt."},
    {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}
]


def update(messages, role, content):
    messages.append({"role": role, "content": content})
    return messages


@dp.message_handler(commands=['chatgpt'])
async def start_chatting(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in chat_storage:
        chat_storage[chat_id] = []
    if chat_id not in timestamps:
        timestamps[chat_id] = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.message_handler(chat_id=chat_id)
    async def continue_chatting(message: types.Message):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id = message.chat.id
        update(chat_storage[chat_id], "user", message.text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if is_request_limit_exceeded(chat_id):
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –º–∏–Ω—É—Ç—É –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        sent_message = await message.answer("ChatGPT –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç" (typing)
        await bot.send_chat_action(chat_id, action=types.ChatActions.TYPING)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É API OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=chat_storage[chat_id]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await sent_message.delete()
        await message.answer(response.choices[0].get('text') or response.choices[0]['message'].get('content'))

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        timestamps[chat_id].append(time.time())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def is_request_limit_exceeded(chat_id):
    current_timestamp = time.time()
    request_limit = 3  # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –º–∏–Ω—É—Ç—É
    timestamp_list = timestamps[chat_id]

    # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –æ–¥–Ω—É –º–∏–Ω—É—Ç—É
    timestamp_list = [
        timestamp for timestamp in timestamp_list if current_timestamp - timestamp < 60]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    timestamps[chat_id] = timestamp_list

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if len(timestamp_list) >= request_limit:
        return True

    return False


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø ChatGpt –±–æ—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /chatgpt, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /dalle2 –∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ,, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–∞ /chatgptclear!")


@dp.message_handler(commands=['help'])
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ChatGpt, —á—Ç–æ–±—ã —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /chatgpt –∏–ª–∏ /dalle2 –∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ, —á—Ç–æ–±—ã —Å–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —É–¥–∞–ª–∏—Ç—å —Ç–æ /chatgptclear. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –ø–æ–º–æ—á—å, –æ–±—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞ @AleksFolt.")


@dp.message_handler(commands=['about'])
async def start_command(message: types.Message):
    await message.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å: @AleksFolt, –°–¥–µ–ª–∞–Ω–æ –Ω–∞ Python, –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º @AleksFolt")


@dp.message_handler(commands=['chatgptclear'])
async def clear_command(message: types.Message):
    chat_id = message.chat.id
    if chat_id in chat_storage:
        chat_storage[chat_id] = messages.copy()
        await message.answer("–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await message.answer("–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø—É—Å—Ç–∞—è. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@dp.message_handler(commands=['chatgptclear'])
async def chatgptclear_command(message: types.Message):
    await message.answer("–û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏")


async def generate_image(text):
    try:
        response = openai.Image.create(
            prompt=text,
            n=1,
            size="1024x1024"
        )
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
        img = await aiohttp.ClientSession().get(response['data'][0]['url'])
        img = io.BytesIO(await img.read())
        return img
    except openai.error.InvalidRequestError:
        logging.exception("Request contains forbidden symbols.")
        return None
    except Exception as e:
        logging.exception(e)
        return None


async def send_image(chat_id, image):
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç
        image = InputFile(image)
        await bot.send_photo(chat_id=chat_id, photo=image)
    except Exception as e:
        logging.exception(e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dalle2
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dalle2
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dalle2
@dp.message_handler(commands=['dalle2'])
async def dalle2_command(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.split("/dalle2 ")[1]
    chat_id = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "Dalle2 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å..."
    sent_message = await bot.send_message(chat_id=chat_id, text="Dalle2 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è "–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ"
    await bot.send_chat_action(chat_id=chat_id, action='upload_photo')

    image = await generate_image(text)

    if image:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        await bot.send_photo(chat_id=chat_id, photo=image)
    else:
        await bot.send_message(chat_id=chat_id,
                               text="–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã üö´. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "Dalle2 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å..."
    await bot.delete_message(chat_id=chat_id, message_id=sent_message.message_id)


executor.start_polling(dp, skip_updates=True)
